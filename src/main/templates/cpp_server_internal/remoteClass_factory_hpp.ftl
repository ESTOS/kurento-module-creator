${remoteClass.name}ImplFactory.hpp
/* Autogenerated with kurento-module-creator */

#ifndef __${camelToUnderscore(remoteClass.name)}_IMPL_FACTORY_HPP__
#define __${camelToUnderscore(remoteClass.name)}_IMPL_FACTORY_HPP__

#include "${remoteClass.name}Impl.hpp"
<#if remoteClass.extends??>
#include "${remoteClass.extends.name}ImplFactory.hpp"
</#if>
#include <Factory.hpp>
#include <MediaObjectImpl.hpp>
#include <boost/property_tree/ptree.hpp>

<#list module.code.implementation["cppNamespace"]?split("::") as namespace>
namespace ${namespace}
{
</#list>

class ${remoteClass.name}ImplFactory : public virtual <#if remoteClass.extends??>${remoteClass.extends.name}Impl<#else>kurento::</#if>Factory
{
public:
  ${remoteClass.name}ImplFactory() = default;

  std::string getName() const override {
    return "${remoteClass.name}";
  };

<#if (remoteClass.constructor)??>
private:

</#if>
<#if (!remoteClass.abstract) && (remoteClass.constructor)??>
  MediaObjectImpl *createObjectPointer (
      const boost::property_tree::ptree &conf,
      const Json::Value &params) const override;

</#if>
  <#if remoteClass.constructor??><#rt>
  MediaObjectImpl *createObject (const boost::property_tree::ptree &conf<#rt>
   <#lt><#list remoteClass.constructor.params as param><#rt>
      <#lt>, <#rt>
      <#lt>${getCppObjectType(param.type, true)}${param.name}<#rt>
   <#lt></#list>) const;
  </#if>
};

<#list module.code.implementation["cppNamespace"]?split("::")?reverse as namespace>
} /* ${namespace} */
</#list>

#endif /*  __${camelToUnderscore(remoteClass.name)}_IMPL_FACTORY_HPP__ */
